#!/usr/bin/env node

/*
   Copyright 2016 Yuki KAN

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

/// <reference path="../typings/index.d.ts" />

"use strict";

import * as fs from "fs";
import * as http from "http";

function usage() {

    console.error(`
Usage:
rivarun [--b25] [--mirakurun host:port] [--priority priority] [--sid SID] [--ch type/channel] rectime destfile
Remarks:
* if rectime  is \`-\`, records indefinitely.
* if destfile is \`-\`, stdout is used for output.
* if \`--sid\` option specified, will ignore \`--ch\` option.
Options:
--b25:                 Send decode request
--mirakurun host:port: Specify Mirakurun hostname and portnumber
--priority priority:   Specify client priority (default=0)
--sid SID:             Specify SID number
--ch type/channel      Specify channeltype and channel
                         type = GR | BS | CS | SKY
--help:                Show this help
--version:             Show version
--list:                Show channel list
    `);
}

function version() {

    const pkg = require("../package.json");

    console.error(`${pkg.name} v${pkg.version}`);
}

if (process.argv[2] === "--help") {
    usage();

    process.exit(0);
}

if (process.argv[2] === "--version") {
    version();

    process.exit(0);
}

let options, argv, writeStream;

options = {
    list: process.argv[2] === "--list",
    b25: false,
    mirakurun: "",
    priority: "0",
    sid: "",
    ch: ""
};

argv = process.argv.slice(2, options.list ? process.argv.length : -2);

for (let i = 0; i < argv.length; i++) {
    switch (argv[i]) {
        case "--b25":
            options.b25 = true;

            break;
    }

    if (i === argv.length - 1) break;

    switch (argv[i]) {
        case "--mirakurun":
            options.mirakurun = argv[i + 1];

            break;

        case "--priority":
            options.priority = argv[i + 1];

            break;

        case "--sid":
            options.sid = argv[i + 1];

            break;

        case "--ch":
            options.ch = argv[i + 1];

            break;
    }
}

const reqOptions = {
    method: "GET",
    headers: {
        "User-Agent": "Rivarun/1.2",
        "X-Mirakurun-Priority": options.priority
    },
    path: "",
    host: undefined,
    port: undefined,
    socketPath: undefined
};

if (options.list) {
    options.rectime = "-";
    options.destfile = "-";

    reqOptions.path = "/api/channels";
} else {
    if (argv.length < 2) {
        usage();

        process.exit(0);
    }

    options.rectime = process.argv[process.argv.length - 2];
    options.destfile = process.argv[process.argv.length - 1];

    if (options.sid && options.sid !== "epg") {
        if (options.ch) {
            reqOptions.path = `/api/channels/${options.ch}/services/${options.sid}/stream?decode=${options.b25 ? 1 : 0}`;
        } else {
            reqOptions.path = `/api/services/${options.sid}/stream?decode=${options.b25 ? 1 : 0}`;
        }
    } else {
        reqOptions.path = `/api/channels/${options.ch}/stream?decode=${options.b25 ? 1 : 0}`;
    }
}

if (options.destfile !== "-") {
    try {
        writeStream = fs.createWriteStream(options.destfile);
    } catch (err) {
        console.error(`Error: ${err.message}`);

        process.exit(1);
    }
} else {
    writeStream = process.stdout;
}

if (options.mirakurun) {
    let mirakurun = options.mirakurun.split(":");

    reqOptions.host = mirakurun[0];
    reqOptions.port = mirakurun[1] || 80;
} else {
    if (process.platform === "win32") {
        reqOptions.socketPath = "\\\\.\\pipe\\mirakurun";
    } else {
        reqOptions.socketPath = "/var/run/mirakurun.sock";
    }
}

let maxRedirectCount = 3;

function request() {

    const req = http.request(reqOptions, res => {

        console.error(`status: ${res.statusCode}`);
        console.error(`headers: ${JSON.stringify(res.headers)}`);

        if (res.statusCode > 300 && res.statusCode < 400 && res.headers["location"]) {
            if (maxRedirectCount === 0) {
                console.error("Error: Too many redirects!");

                process.exit(1);
            }
            if (/^\//.test(res.headers["location"]) === false) {
                console.error(`Error: Redirecting location "${res.headers["location"]}" isn't supported.`);

                process.exit(1);
            }

            --maxRedirectCount;

            reqOptions.path = res.headers["location"];

            setTimeout(request, 100);
            return;
        }

        if (options.rectime !== "-") {
            setTimeout(() => res.unpipe(writeStream), parseInt(options.rectime, 10) * 1000);
        }

        res.pipe(writeStream);
    });

    req.on("error", err => {

        console.error(`Error: ${err.message}`);

        process.exit(1);
    });

    req.end();
}

request();